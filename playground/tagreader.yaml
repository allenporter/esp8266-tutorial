# Tagreader project based on this blog post
# https://www.home-assistant.io/blog/2020/09/15/home-assistant-tags/
# and code in https://github.com/adonno/tagreader/blob/master/tagreader.yaml
# Hardware:
#  - esp32
#  - PN532: https://esphome.io/components/binary_sensor/pn532.html

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

substitutions:
  devicename: tagreader
  friendly_name: TagReader

# Enable logging
logger:

ota:
  password: !secret ota_password


esphome:
  name: tagreader
  platform: ESP32
  board: nodemcu-32s

  # If buzzer is enabled, notify on api connection success
  on_boot:
    priority: -10
    then:
    - wait_until:
        api.connected:
    - logger.log: API is connected!
    - rtttl.play: "success:d=24,o=5,b=100:c,g,b"

# Define switches to control LED and buzzer from HA
switch:
  - platform: template
    name: "${friendly_name} Buzzer Enabled"
    id: buzzer_enabled
    icon: mdi:volume-high
    optimistic: true
    restore_state: true

# Enable Home Assistant API
api:
  password: !secret api_password

  services:
  - service: rfidreader_tag_ok
    then:
    - rtttl.play: "beep:d=16,o=5,b=100:b"

  - service: rfidreader_tag_ko
    then:
    - rtttl.play: "beep:d=8,o=5,b=100:b"

  - service: play_rtttl
    variables:
      song_str: string
    then:
    - rtttl.play: !lambda 'return song_str;'

  - service: write_tag_random
    then:
    - lambda: |-
        static const char alphanum[] = "0123456789abcdef";
        std::string uri = "https://www.home-assistant.io/tag/";
        for (int i = 0; i < 8; i++)
          uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
        uri += "-";
        for (int j = 0; j < 3; j++) {
          for (int i = 0; i < 4; i++)
            uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
          uri += "-";
        }
        for (int i = 0; i < 12; i++)
          uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
        auto message = new nfc::NdefMessage();
        message->add_uri_record(uri);
        ESP_LOGD("tagreader", "Writing payload: %s", uri.c_str());
        id(pn532_board).write_mode(message);
  - service: write_tag_id
    variables:
      tag_id: string
    then:
    - lambda: |-
        auto message = new nfc::NdefMessage();
        std::string uri = "https://www.home-assistant.io/tag/";
        uri += tag_id;
        message->add_uri_record(uri);
        id(pn532_board).write_mode(message);
  - service: clean_tag
    then:
    - lambda: 'id(pn532_board).clean_mode();'

  - service: cancel_writing
    then:
    - lambda: 'id(pn532_board).read_mode();'

i2c:
  sda: 21
  scl: 22
  scan: True

pn532_i2c:
  id: pn532_board
  on_tag:
    then:
    - homeassistant.tag_scanned: !lambda |
        ESP_LOGD("tagreader", "Tag scanned");
        if (!tag.has_ndef_message()) {
          ESP_LOGD("tagreader", "No NDEF");
          return x;
        }
        auto message = tag.get_ndef_message();
        auto records = message->get_records();
        for (auto &record : records) {
          std::string payload = record->get_payload();
          size_t pos = payload.find("https://www.home-assistant.io/tag/");
          if (pos != std::string::npos) {
            return payload.substr(pos + 34);
          }
        }
        ESP_LOGD("tagreader", "Bad NDEF, fallback to uid");
        return x;
    - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
#    - if:
#        condition:
#          switch.is_on: buzzer_enabled
#        then:
#        - rtttl.play: "success:d=24,o=5,b=100:c,g,b"

# Define the buzzer output
output:
- platform: ledc
  # Pin RX2 on esp32
  pin: GPIO16
  id: buzzer

binary_sensor:
  - platform: status
    name: "${friendly_name} Status"

# Define buzzer as output for RTTTL
rtttl:
  output: buzzer
